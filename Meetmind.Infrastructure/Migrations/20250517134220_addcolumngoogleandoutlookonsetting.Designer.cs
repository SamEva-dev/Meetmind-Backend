// <auto-generated />
using System;
using Meetmind.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Meetmind.Infrastructure.Migrations
{
    [DbContext(typeof(MeetMindDbContext))]
    [Migration("20250517134220_addcolumngoogleandoutlookonsetting")]
    partial class addcolumngoogleandoutlookonsetting
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("Meetmind.Domain.Entities.MeetingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalSource")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartUtc")
                        .HasColumnType("TEXT");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SummaryPath")
                        .HasColumnType("TEXT");

                    b.Property<int>("SummaryState")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TranscriptPath")
                        .HasColumnType("TEXT");

                    b.Property<int>("TranscriptState")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId", "ExternalSource")
                        .IsUnique()
                        .HasFilter("[ExternalId] IS NOT NULL AND [ExternalSource] IS NOT NULL");

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("Meetmind.Domain.Entities.SettingsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("AutoStartRecord")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AutoSummarize")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AutoTranscript")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AutoTranslate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NotificationRepeatInterval")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NotifyBeforeMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequireConsent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RetentionDays")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("UseGoogleCalendar")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("UseOutlookCalendar")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Meetmind.Domain.Models.CalendarSyncLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("TEXT");

                    b.Property<int>("MeetingsCreated")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimestampUtc")
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalEventsFound")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("CalendarSyncLogs");
                });

            modelBuilder.Entity("Meetmind.Domain.Models.MeetingReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalSource")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SummaryPath")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("TranscriptPath")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StartUtc");

                    b.ToTable("MeetingReadModels", (string)null);

                    b.HasAnnotation("Sqlite:FTS5", "SearchText");
                });
#pragma warning restore 612, 618
        }
    }
}
